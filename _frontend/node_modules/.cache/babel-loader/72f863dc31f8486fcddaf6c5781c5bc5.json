{"ast":null,"code":"var _jsxFileName = \"/home/rackham/dev/toggle/frontend/src/Components/AddPost.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport UploadFile from \"./UploadFile\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getPresignedUrl } from \"../actions/feedAction\";\nimport { createPost } from \"../actions/feedAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddPost = _ref => {\n  _s();\n\n  let {\n    toggle\n  } = _ref;\n  const presignedUrlResponse = useSelector(state => state.presignedUrl);\n  const [error, setError] = useState(null);\n\n  const _createPost = useSelector(state => state.createPost);\n\n  const dispatch = useDispatch();\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [content, setContent] = useState(\"\");\n\n  const _typeHandler = _type => {\n    setType(_type);\n  };\n\n  const presignedUrl = useMemo(() => {\n    if (presignedUrlResponse.success) {\n      return {\n        _endUrl: presignedUrlResponse.data.presigned,\n        url: presignedUrlResponse.data.url\n      };\n    }\n\n    return null;\n  }, [presignedUrlResponse]);\n\n  const _handleChange = async file => {\n    setFile(file);\n\n    if (!presignedUrl) {\n      const params = {\n        fileName: file.name,\n        fileType: file.type,\n        type: \"memory\"\n      };\n      dispatch(getPresignedUrl(params));\n    }\n  };\n\n  const _handleCheckbox = () => {\n    setIsPrivate(!isPrivate);\n  };\n\n  const _handleSubmit = async () => {\n    try {\n      let params = {\n        isPrivate\n      };\n\n      if (presignedUrl) {\n        params[\"image\"] = {\n          url: presignedUrl.url,\n          caption: \"\"\n        };\n        let formData = new FormData();\n\n        if (file) {\n          formData.append(\"file\", file);\n        }\n\n        const reqObj = {\n          method: \"PUT\",\n          body: file\n        };\n        await fetch(presignedUrl._endUrl, reqObj);\n      } else {\n        params[\"content\"] = content;\n      }\n\n      dispatch(createPost(params));\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    if (_createPost.error) {\n      setError({\n        msg: _createPost.error.message\n      });\n    }\n  }, [_createPost]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    toggle: toggle,\n    children: type.length > 0 ? /*#__PURE__*/_jsxDEV(PostContainer, {\n      children: [type !== \"memory\" ? /*#__PURE__*/_jsxDEV(TextArea, {\n        value: content,\n        onChange: e => {\n          setContent(e.target.value);\n        },\n        rows: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(UploadFile, {\n        image: file,\n        cb: _handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: isPrivate,\n          onChange: _handleCheckbox,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          children: \"Private\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 4\n      }, this), toggle ? /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: _handleSubmit,\n          toggle: toggle,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(Action, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => _typeHandler(\"post\"),\n        toggle: toggle,\n        children: \"Add Your Thought\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => _typeHandler(\"memory\"),\n        toggle: toggle,\n        children: \"Add Your Memory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 2\n  }, this);\n};\n\n_s(AddPost, \"pVHjVWLyPnf3PEgRDPMN11V+SyI=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = AddPost;\nconst Container = styled.div`\n\tposition: absolute;\n\tright: ${props => props.toggle ? \"80px\" : \"50px\"};\n\tbottom: ${props => props.toggle ? \"80px\" : \"50px\"};\n\topacity: ${props => props.toggle ? 1 : 0};\n\twidth: ${props => props.toggle ? \"500px\" : \"0px\"};\n\tmin-height: ${props => props.toggle ? \"200px\" : \"0px\"};\n\tmax-height: 400px;\n\tbackground-color: #ffffffa3;\n\tborder-radius: 10px;\n\ttransform-origin: bottom right;\n\ttransition: all 0.4s linear;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tpadding: 20px;\n`;\n_c2 = Container;\nconst Action = styled.div`\n\twidth: 100%;\n\tmin-height: inherit;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-wrap: wrap;\n\tgap: 20px;\n`;\n_c3 = Action;\nconst Button = styled.button`\n\tborder: none;\n\theight: 48px;\n\tpadding: 10px;\n\tbackground-color: #4834d4;\n\tcolor: #fff;\n\tfont-weight: 600;\n\ttransition-delay: 200s;\n\topacity: ${props => props.toggle ? 1 : 0};\n\tfont-size: 20px;\n\tborder-radius: 4px;\n\ttransition: all 0.1s linear;\n\t&:hover{\n\t\tbox-shadow: 5px 5px 20px #4834d4;\n\t}\n\tcursor: pointer;\n\tdisplay: ${props => props.toggle ? \"block\" : \"none\"}\n`;\n_c4 = Button;\nconst PostContainer = styled.div`\n\twidth: 100%;\n\tmin-height: inherit;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 10px;\n`;\n_c5 = PostContainer;\nconst Checkbox = styled.input`\n\n`;\n_c6 = Checkbox;\nconst Label = styled.label`\n\tcolor: #212121;\n`;\n_c7 = Label;\nconst InputWrapper = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tgap: 10px;\n`;\n_c8 = InputWrapper;\nconst TextArea = styled.textarea`\n\twidth: 100%;\n\tborder: none;\n\tborder-radius: 10px;\n\tresize: none;\n\tflex: 1;\n\tpadding: 20px;\n\tbackground-color: #636e722e;\n\tcolor: #212121;\n\tfont-weight: 500;\n`;\n_c9 = TextArea;\nconst ButtonWrapper = styled.div`\n\twidth: 100%;\n`;\n_c10 = ButtonWrapper;\nexport default AddPost;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"AddPost\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Action\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"PostContainer\");\n$RefreshReg$(_c6, \"Checkbox\");\n$RefreshReg$(_c7, \"Label\");\n$RefreshReg$(_c8, \"InputWrapper\");\n$RefreshReg$(_c9, \"TextArea\");\n$RefreshReg$(_c10, \"ButtonWrapper\");","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/Components/AddPost.tsx"],"names":["useEffect","useMemo","useState","styled","UploadFile","useSelector","useDispatch","getPresignedUrl","createPost","AddPost","toggle","presignedUrlResponse","state","presignedUrl","error","setError","_createPost","dispatch","isPrivate","setIsPrivate","type","setType","file","setFile","content","setContent","_typeHandler","_type","success","_endUrl","data","presigned","url","_handleChange","params","fileName","name","fileType","_handleCheckbox","_handleSubmit","caption","formData","FormData","append","reqObj","method","body","fetch","msg","message","length","e","target","value","Container","div","props","Action","Button","button","PostContainer","Checkbox","input","Label","label","InputWrapper","TextArea","textarea","ButtonWrapper"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport UploadFile from \"./UploadFile\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport { StateType } from \"../interfacesAndTypes/TState\";\nimport { getPresignedUrl } from \"../actions/feedAction\";\nimport { PostParamsType } from  \"../interfacesAndTypes/RequestParams\";\nimport { createPost } from \"../actions/feedAction\";\n\ntype Props = {\n\ttoggle: boolean\n}\n\ntype ToggleProps = {\n\ttoggle?: boolean\n}\n\nconst AddPost = ({toggle}: Props) => {\n\tconst presignedUrlResponse: StateType = useSelector((state: RootState)=> state.presignedUrl);\n\tconst [error, setError] = useState<any>(null);\n\tconst _createPost: StateType = useSelector((state: RootState)=> state.createPost);\n\tconst dispatch = useDispatch();\n\tconst [isPrivate, setIsPrivate] = useState<boolean>(false);\n\tconst [type, setType] = useState<string>(\"\")\n\tconst [file, setFile] = useState<File | null>(null)\n\tconst [content, setContent] = useState<string>(\"\");\n\tconst _typeHandler = (_type:string)=>{\n\t\tsetType(_type);\n\t}\n   const presignedUrl = useMemo(()=>{\n\t\tif(presignedUrlResponse.success){\n\t\t\treturn {_endUrl: presignedUrlResponse.data.presigned, url: presignedUrlResponse.data.url};\n\t\t}\n\t\treturn null;\n   },[presignedUrlResponse])\n\n    const _handleChange = async (file:File)=>{\n\t   setFile(file);\n\t   if(!presignedUrl){\n\t\t     const params = {\n\t\t\t\tfileName: file.name,\n\t\t\t\tfileType: file.type,\n\t\t\t\ttype: \"memory\"\n\t\t\t }\n\t\t\tdispatch<any>(getPresignedUrl(params))\n\t   }\n   }\n\n   const _handleCheckbox = ()=>{\n\n\tsetIsPrivate(!isPrivate);\n\n   }\n\n   const _handleSubmit = async ()=>{\n\t   try {\n\t\t   let params: PostParamsType = {\n\t\t\t   isPrivate\n\t\t   }\n\t\t   if(presignedUrl){\n\t\t\t   params[\"image\"] = {\n\t\t\t\t   url: presignedUrl.url,\n\t\t\t\t   caption: \"\"\n\t\t\t   }\n\n\t\t\t   let formData = new FormData();\n\t\t\t   if(file){\n\t\t\t   \tformData.append(\"file\", file);\n\t\t\t   }\n\t\t\t   const reqObj= {\n\t\t\t\t   method: \"PUT\",\n\t\t\t\t   body: file\n\t\t\t   }\n\t\t\t   await fetch(presignedUrl._endUrl,reqObj);\n\t\t   }else{\n\t\t\t   params[\"content\"] = content;\n\t\t   }\n\n\t\t   dispatch<any>(createPost(params));\n\t   } catch (error) {\n\t\t   \n\t   }\n   }\n\n   useEffect(()=>{\n\t   if(_createPost.error){\n\t\t\tsetError({\n\t\t\t\tmsg: _createPost.error.message\n\t\t\t})\n\t   }\n   },[_createPost])\n  return (\n\t<Container toggle={toggle}>\n\t\t{type.length > 0 ? <PostContainer>\n\t\t\t{\n\t\t\ttype!== \"memory\" ? \n\t\t\t<TextArea value={content} onChange={(e)=>{ setContent(e.target.value)}} rows={5} /> \n\t\t\t:<UploadFile image={file} cb={_handleChange} />\n\t\t\t}\n\t\t\t<InputWrapper>\n\t\t\t\t<Checkbox checked={isPrivate} onChange={_handleCheckbox} type=\"checkbox\" /> \n\t\t\t\t<Label>Private</Label>\n\t\t\t</InputWrapper>\n\t\t\t\n\t\t\t{toggle ? <ButtonWrapper>\n\t\t\t\t<Button onClick={_handleSubmit} toggle={toggle}>Submit</Button>\n\t\t\t</ButtonWrapper> : null }\n\t\t</PostContainer>: <Action>\n\t\t\t <Button onClick={()=> _typeHandler(\"post\")} toggle={toggle}>Add Your Thought</Button>\n\t\t\t <Button onClick={()=> _typeHandler(\"memory\")} toggle={toggle}>Add Your Memory</Button>\n\t\t\t</Action>}\n\t</Container>\n  )\n}\n\nconst Container = styled.div<ToggleProps>`\n\tposition: absolute;\n\tright: ${props => props.toggle ? \"80px\": \"50px\"};\n\tbottom: ${props => props.toggle ? \"80px\": \"50px\"};\n\topacity: ${props => props.toggle ? 1: 0};\n\twidth: ${props => props.toggle ? \"500px\": \"0px\"};\n\tmin-height: ${props => props.toggle ? \"200px\": \"0px\"};\n\tmax-height: 400px;\n\tbackground-color: #ffffffa3;\n\tborder-radius: 10px;\n\ttransform-origin: bottom right;\n\ttransition: all 0.4s linear;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tpadding: 20px;\n`;\n\nconst Action = styled.div`\n\twidth: 100%;\n\tmin-height: inherit;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-wrap: wrap;\n\tgap: 20px;\n`\n\nconst Button = styled.button<ToggleProps>`\n\tborder: none;\n\theight: 48px;\n\tpadding: 10px;\n\tbackground-color: #4834d4;\n\tcolor: #fff;\n\tfont-weight: 600;\n\ttransition-delay: 200s;\n\topacity: ${props => props.toggle ? 1: 0};\n\tfont-size: 20px;\n\tborder-radius: 4px;\n\ttransition: all 0.1s linear;\n\t&:hover{\n\t\tbox-shadow: 5px 5px 20px #4834d4;\n\t}\n\tcursor: pointer;\n\tdisplay: ${props=> props.toggle ? \"block\": \"none\"}\n`\n\n\nconst PostContainer = styled.div`\n\twidth: 100%;\n\tmin-height: inherit;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 10px;\n`;\n\nconst Checkbox = styled.input`\n\n`;\n\nconst Label = styled.label`\n\tcolor: #212121;\n`\n\nconst InputWrapper = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tgap: 10px;\n`\n\nconst TextArea = styled.textarea`\n\twidth: 100%;\n\tborder: none;\n\tborder-radius: 10px;\n\tresize: none;\n\tflex: 1;\n\tpadding: 20px;\n\tbackground-color: #636e722e;\n\tcolor: #212121;\n\tfont-weight: 500;\n`\n\nconst ButtonWrapper = styled.div`\n\twidth: 100%;\n`\n\nexport default AddPost"]},"metadata":{},"sourceType":"module"}