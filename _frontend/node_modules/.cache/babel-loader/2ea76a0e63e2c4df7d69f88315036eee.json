{"ast":null,"code":"var _jsxFileName = \"/home/rackham/dev/toggle/frontend/src/Components/Dashboard.tsx\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PostCard from './PostCard';\nimport { connect } from 'react-redux';\nimport { getFeed } from '../actions/feedAction';\nimport { togglePrivacyPost } from '../actions/feedAction';\nimport Loading from './Loading';\nimport { deletePost } from '../actions/feedAction';\nimport { AuthContext } from \"../Context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this._deletePost = id => {\n      const params = {\n        id\n      };\n      this.setState({\n        id\n      }, this.props.deletePost(params));\n    };\n\n    this._togglePost = id => {\n      const params = {\n        id\n      };\n      this.setState({\n        id\n      }, this.props.getTogglePrivacy(params));\n    };\n\n    this.state = {\n      posts: [],\n      id: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.getPosts();\n    console.log(this.context.socket);\n    const {\n      socket\n    } = this.context;\n    socket.on(\"new-post\", _ref => {\n      let {\n        data\n      } = _ref;\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.posts && this.props.posts.data && this.props.posts.data != prevProps.posts.data) {\n      this.setState({\n        posts: [...this.props.posts.data.posts]\n      });\n    }\n\n    if (this.props.deletePostResponse && this.props.deletePostResponse.data && this.props.deletePostResponse.data.success && this.props.deletePostResponse.data != prevProps.deletePostResponse.data) {\n      const {\n        id\n      } = this.state;\n      this.setState({\n        posts: [...this.state.posts.filter(post => post._id != id)],\n        id: \"\"\n      });\n    }\n\n    if (this.props.togglePrivacy && this.props.togglePrivacy.data && this.props.togglePrivacy.data.success && this.props.togglePrivacy.data != prevProps.togglePrivacy.data) {\n      const {\n        id\n      } = this.state;\n      this.setState({\n        posts: [...this.state.posts.map(post => {\n          if (id == post._id) {\n            post.isPrivate = !post.isPrivate;\n            return post;\n          }\n\n          return post;\n        })],\n        id: \"\"\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(PostContainer, {\n        children: this.state.posts.length > 0 ? this.state.posts.map(post => {\n          return /*#__PURE__*/_jsxDEV(PostCard, {\n            handleTogglePrivacy: this._togglePost,\n            handleDelete: this._deletePost,\n            data: post\n          }, post._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 16\n          }, this);\n        }) : this.props.getPosts.loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(Message, {\n          children: \"Share some memory to your wall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 2\n    }, this);\n  }\n\n}\n\nDashboard.contextType = AuthContext;\nconst Container = styled.div`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n_c = Container;\nconst PostContainer = styled.div`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c2 = PostContainer;\nconst Button = styled.button`\n  border: none;\n\tpadding: 10px;\n\tbackground-color: #4834d4;\n\tcolor: #fff;\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tborder-radius: 4px;\n\ttransition: all 0.1s linear;\n\t&:hover{\n\t\tbox-shadow: 5px 5px 20px #4834d4;\n\t}\n\tcursor: pointer;\n`;\nconst Message = styled.h1`\n  color: #636e72;\n`;\n_c3 = Message;\n\nconst mapStateProps = state => {\n  return {\n    posts: state.dashboardFeed,\n    deletePostResponse: state.deletePost,\n    togglePrivacy: state.togglePrivacy\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPosts: () => dispatch(getFeed()),\n    deletePost: params => dispatch(deletePost(params)),\n    getTogglePrivacy: params => dispatch(togglePrivacyPost(params))\n  };\n};\n\nexport default connect(mapStateProps, mapDispatchToProps)(Dashboard);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"PostContainer\");\n$RefreshReg$(_c3, \"Message\");","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/Components/Dashboard.tsx"],"names":["React","Component","styled","PostCard","connect","getFeed","togglePrivacyPost","Loading","deletePost","AuthContext","Dashboard","constructor","props","_deletePost","id","params","setState","_togglePost","getTogglePrivacy","state","posts","componentDidMount","getPosts","console","log","context","socket","on","data","componentDidUpdate","prevProps","deletePostResponse","success","filter","post","_id","togglePrivacy","map","isPrivate","render","length","loading","contextType","Container","div","PostContainer","Button","button","Message","h1","mapStateProps","dashboardFeed","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PostCard from './PostCard';\nimport { connect } from 'react-redux';\nimport { PostParamsType } from '../interfacesAndTypes/RequestParams';\nimport { AppDispatch, RootState } from '../store';\nimport { getFeed } from '../actions/feedAction';\nimport { togglePrivacyPost } from '../actions/feedAction';\nimport Loading from './Loading';\nimport { deletePost } from '../actions/feedAction';\nimport { AuthContext } from \"../Context/AuthContext\"\n\ntype Props = {\n  getPosts?: any,\n  posts?: any,\n  deletePost?: any,\n  deletePostResponse?: any\n  togglePrivacy?: any\n  getTogglePrivacy?: any\n}\n\ntype State = {\n  posts: any\n  id: string\n}\n\n\nclass Dashboard extends Component<Props, State> {\n\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      posts: [],\n      id: \"\"\n    }\n  }\n\n  componentDidMount(){\n    this.props.getPosts();\n    console.log(this.context.socket);\n    const { socket } = this.context;\n    socket.on(\"new-post\", ({data})=>{\n\n    })\n  }\n  \n\n  componentDidUpdate(prevProps: Props){\n    if(this.props.posts && this.props.posts.data && this.props.posts.data != prevProps.posts.data ){\n      this.setState({\n        posts: [...this.props.posts.data.posts]\n      })\n    }\n    if(this.props.deletePostResponse && this.props.deletePostResponse.data && this.props.deletePostResponse.data.success && this.props.deletePostResponse.data != prevProps.deletePostResponse.data){\n      const { id } = this.state;\n      this.setState({\n        posts: [...this.state.posts.filter((post: any)=> post._id != id)],\n        id: \"\"\n      })\n    }\n    if(this.props.togglePrivacy && this.props.togglePrivacy.data && this.props.togglePrivacy.data.success && this.props.togglePrivacy.data != prevProps.togglePrivacy.data){\n      const { id } = this.state;\n      this.setState({\n        posts: [...this.state.posts.map((post: any)=> {\n          if(id == post._id){\n            post.isPrivate = !post.isPrivate;\n            return post;\n          }\n          return post;\n        })],\n        id: \"\"\n      })\n    }\n  }\n\n  _deletePost = (id:string)=>{\n    const params = {\n      id\n    }\n    this.setState({\n      id\n    },this.props.deletePost(params))\n    \n  }\n\n  _togglePost = (id: string)=>{\n    const params = {\n      id\n    }\n    this.setState({\n      id\n    }, this.props.getTogglePrivacy(params))\n    \n  }\n\n  render(){\n    \n  return (\n\t<Container>\n    <PostContainer>\n\n      {this.state.posts.length > 0  ? this.state.posts.map((post: PostParamsType)=>{\n        return <PostCard handleTogglePrivacy={this._togglePost} handleDelete={this._deletePost} key={post._id} data={post}/>\n      }) : this.props.getPosts.loading ? <Loading />  :<Message>Share some memory to your wall</Message> }\n    </PostContainer>\n  </Container>\n  )\n    }\n}\n\nDashboard.contextType = AuthContext;\n\nconst Container = styled.div`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`\n\nconst PostContainer = styled.div`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`\n\nconst Button = styled.button`\n  border: none;\n\tpadding: 10px;\n\tbackground-color: #4834d4;\n\tcolor: #fff;\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tborder-radius: 4px;\n\ttransition: all 0.1s linear;\n\t&:hover{\n\t\tbox-shadow: 5px 5px 20px #4834d4;\n\t}\n\tcursor: pointer;\n`\n\nconst Message = styled.h1`\n  color: #636e72;\n`\n\nconst mapStateProps = (state: RootState)=>{\n  return {\n    posts: state.dashboardFeed,\n    deletePostResponse: state.deletePost,\n    togglePrivacy: state.togglePrivacy\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch: AppDispatch)=>{\n  return  {\n    getPosts: ()=> dispatch<any>(getFeed()),\n    deletePost: (params: any) => dispatch<any>(deletePost(params)),\n    getTogglePrivacy: (params:any) => dispatch<any>(togglePrivacyPost(params))\n  }\n}\n\nexport default connect(mapStateProps, mapDispatchToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}