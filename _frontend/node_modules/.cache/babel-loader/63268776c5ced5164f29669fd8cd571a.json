{"ast":null,"code":"var _jsxFileName = \"/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { verifyOTP, getLogout } from \"../actions/usersAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { io } from \"socket.io-client\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [login, setLogin] = useState(false);\n  const [socket, setSocket] = useState(null);\n  const response = useSelector(state => state.verifyOTP);\n  const logoutResponse = useSelector(state => state.logout);\n  const dispatch = useDispatch();\n\n  const signin = (params, callback) => {\n    dispatch(verifyOTP(params));\n    callback();\n  };\n\n  const signout = () => {\n    dispatch(getLogout());\n  };\n\n  let loggedin = useMemo(() => {\n    if (localStorage.getItem(\"TOGGLE_AUTH_TOKEN\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }, [login]);\n  let value = {\n    loggedin,\n    signin,\n    signout,\n    socket\n  };\n  useEffect(() => {\n    if (response.success) {\n      let token = localStorage.getItem(\"TOGGLE_AUTH_TOKEN\");\n\n      let _socket = io(\"ws://localhost:5000\", {\n        auth: {\n          token\n        }\n      });\n\n      setSocket(_socket);\n      setLogin(true);\n    }\n\n    if (response.error) {\n      enqueueSnackbar(response.error.message, {\n        variant: \"error\",\n        action: /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => closeSnackbar(),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      });\n    }\n  }, [response, enqueueSnackbar, closeSnackbar]);\n  useEffect(() => {\n    if (logoutResponse.success) {\n      setSocket(null);\n      setLogin(false);\n    }\n\n    if (logoutResponse.error) {\n      enqueueSnackbar(logoutResponse.error.message, {\n        variant: \"error\",\n        action: /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => closeSnackbar(),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      });\n    }\n  }, [enqueueSnackbar, closeSnackbar, logoutResponse]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 2\n  }, this);\n};\n\n_s(AuthProvider, \"cwP/CM+0tIpCUaBRFGIICUUWZ1Q=\", false, function () {\n  return [useSnackbar, useSelector, useSelector, useDispatch];\n});\n\n_c = AuthProvider;\nconst CloseButton = styled.button`\n\tborder: 1px solid #fff;\n\tborder-radius: 4px;\n\tpadding: 10px 20px;\n\tbackground: transparent;\n\tcolor: #fff;\n\tfont-weight: 500;\n`;\n_c2 = CloseButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"CloseButton\");","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx"],"names":["useState","useEffect","useMemo","AuthContext","verifyOTP","getLogout","useSelector","useDispatch","useSnackbar","io","styled","AuthProvider","children","enqueueSnackbar","closeSnackbar","login","setLogin","socket","setSocket","response","state","logoutResponse","logout","dispatch","signin","params","callback","signout","loggedin","localStorage","getItem","value","success","token","_socket","auth","error","message","variant","action","CloseButton","button"],"mappings":"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","sourcesContent":["import { ReactNode, useState, useEffect, useMemo }from 'react'\nimport { AuthContext, ParamsType } from './AuthContext'\nimport { verifyOTP, getLogout } from \"../actions/usersAction\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"../store\"\nimport { StateType } from \"../interfacesAndTypes/TState\"\nimport { useSnackbar } from \"notistack\"\nimport { io, Socket } from \"socket.io-client\";\nimport styled from \"styled-components\";\n\ntype Props = {\n\tchildren: ReactNode\n}\n\nexport const AuthProvider = ({ children }: Props) => {\n  const {enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [login, setLogin] = useState<boolean>(false)\n  const [socket, setSocket] = useState<Socket<any, any>| null>(null);\n  const response: StateType = useSelector((state: RootState)=> state.verifyOTP);\n  const logoutResponse: StateType = useSelector((state: RootState)=> state.logout);\n  const dispatch = useDispatch<AppDispatch>();\n  const signin = (params: ParamsType, callback: VoidFunction )=>{\n    dispatch<any>(verifyOTP(params))\n    callback()\n   }\n\n   const signout = ()=>{\n      dispatch<any>(getLogout())\n   }\n\n   let loggedin = useMemo(()=>{\n    if(localStorage.getItem(\"TOGGLE_AUTH_TOKEN\")){\n      return true;\n    }else{\n      return false;\n    }\n   }, [login])\n\n  let value = { loggedin, signin, signout, socket }\n  useEffect(()=>{\n    if(response.success){\n      let token = localStorage.getItem(\"TOGGLE_AUTH_TOKEN\");\n      let _socket = io(\"ws://localhost:5000\", {\n        auth: {\n          token\n        }\n      });\n      setSocket(_socket);\n      setLogin(true);\n    }\n    if(response.error){\n\t\t\tenqueueSnackbar(response.error.message, {\n\t\t\t\tvariant: \"error\",\n\t\t\t\taction: <CloseButton onClick={()=>closeSnackbar()}>Dismiss</CloseButton>\n\t\t\t})\n    }\n  }, [response, enqueueSnackbar, closeSnackbar])\n  useEffect(()=>{\n    if(logoutResponse.success){\n      setSocket(null);\n      setLogin(false);\n    }\n    if(logoutResponse.error){\n\t\t\tenqueueSnackbar(logoutResponse.error.message, {\n\t\t\t\tvariant: \"error\",\n\t\t\t\taction: <CloseButton onClick={()=>closeSnackbar()}>Dismiss</CloseButton>\n\t\t\t})\n    }\n  },[enqueueSnackbar, closeSnackbar, logoutResponse])\n  return (\n\t<AuthContext.Provider value={value}>\n\t\t{children}\n\t</AuthContext.Provider>\n  )\n}\n\nconst CloseButton = styled.button`\n\tborder: 1px solid #fff;\n\tborder-radius: 4px;\n\tpadding: 10px 20px;\n\tbackground: transparent;\n\tcolor: #fff;\n\tfont-weight: 500;\n`\n"]},"metadata":{},"sourceType":"module"}