{"ast":null,"code":"var _jsxFileName = \"/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { verifyOTP } from \"../actions/usersAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [login, setLogin] = useState(false);\n  const response = useSelector(state => state.verifyOTP);\n  const dispatch = useDispatch();\n\n  const signin = (params, callback) => {\n    dispatch(verifyOTP(params));\n    callback();\n  };\n\n  const signout = () => {\n    localStorage.removeItem(\"TOGGLE_AUTH_TOKEN\");\n    setLogin(false);\n  };\n\n  let value = {\n    loggedin: login,\n    signin,\n    signout\n  };\n  useEffect(() => {\n    if (response.success) {\n      setLogin(true);\n    }\n\n    if (response.error) {\n      enqueueSnackbar(response.error.message, {\n        variant: \"error\",\n        action: /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => closeSnackbar(),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      });\n    }\n  }, [response]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 2\n  }, this);\n};\n\n_s(AuthProvider, \"+hYjn63eUAlFEX6xwf11dC/RPf0=\", false, function () {\n  return [useSnackbar, useSelector, useDispatch];\n});\n\n_c = AuthProvider;\nconst CloseButton = styled.button`\n\tborder: 1px solid #fff;\n\tborder-radius: 4px;\n\tpadding: 10px 20px;\n\tbackground: transparent;\n\tcolor: #fff;\n\tfont-weight: 500;\n`;\n_c2 = CloseButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"CloseButton\");","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx"],"names":["useState","useEffect","AuthContext","verifyOTP","useSelector","useDispatch","useSnackbar","styled","AuthProvider","children","enqueueSnackbar","closeSnackbar","login","setLogin","response","state","dispatch","signin","params","callback","signout","localStorage","removeItem","value","loggedin","success","error","message","variant","action","CloseButton","button"],"mappings":";;;AAAA,SAAoBA,QAApB,EAAuCC,SAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAAwC,eAAxC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAKA,OAAO,MAAMC,YAAY,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACnD,QAAM;AAACC,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAAoCL,WAAW,EAArD;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAU,KAAV,CAAlC;AACA,QAAMc,QAAmB,GAAGV,WAAW,CAAEW,KAAD,IAAqBA,KAAK,CAACZ,SAA5B,CAAvC;AACA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;;AACA,QAAMY,MAAM,GAAG,CAACC,MAAD,EAAqBC,QAArB,KAA+C;AAC5DH,IAAAA,QAAQ,CAAMb,SAAS,CAACe,MAAD,CAAf,CAAR;AACAC,IAAAA,QAAQ;AACR,GAHF;;AAKC,QAAMC,OAAO,GAAG,MAAI;AACjBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,mBAAxB;AACAT,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACF,GAHD;;AAKD,MAAIU,KAAK,GAAG;AAAEC,IAAAA,QAAQ,EAAEZ,KAAZ;AAAmBK,IAAAA,MAAnB;AAA2BG,IAAAA;AAA3B,GAAZ;AACAnB,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGa,QAAQ,CAACW,OAAZ,EAAoB;AAClBZ,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACD,QAAGC,QAAQ,CAACY,KAAZ,EAAkB;AACnBhB,MAAAA,eAAe,CAACI,QAAQ,CAACY,KAAT,CAAeC,OAAhB,EAAyB;AACvCC,QAAAA,OAAO,EAAE,OAD8B;AAEvCC,QAAAA,MAAM,eAAE,QAAC,WAAD;AAAa,UAAA,OAAO,EAAE,MAAIlB,aAAa,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAF+B,OAAzB,CAAf;AAIE;AACF,GAVQ,EAUN,CAACG,QAAD,CAVM,CAAT;AAWA,sBACD,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAES,KAA7B;AAAA,cACEd;AADF;AAAA;AAAA;AAAA;AAAA,UADC;AAKD,CAhCM;;GAAMD,Y;UAC+BF,W,EAEdF,W,EACXC,W;;;KAJNG,Y;AAkCb,MAAMsB,WAAW,GAAGvB,MAAM,CAACwB,MAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMD,W","sourcesContent":["import { ReactNode, useState, useMemo, useEffect }from 'react'\nimport { AuthContext, ParamsType } from './AuthContext'\nimport { verifyOTP } from \"../actions/usersAction\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"../store\"\nimport { StateType } from \"../interfacesAndTypes/TState\"\nimport { useSnackbar } from \"notistack\"\nimport styled from \"styled-components\";\ntype Props = {\n\tchildren: ReactNode\n}\n\nexport const AuthProvider = ({ children }: Props) => {\n  const {enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [login, setLogin] = useState<boolean>(false) \n  const response: StateType = useSelector((state: RootState)=> state.verifyOTP);\n  const dispatch = useDispatch<AppDispatch>();\n  const signin = (params: ParamsType, callback: VoidFunction )=>{\n    dispatch<any>(verifyOTP(params))\n    callback()\n   }\n\n   const signout = ()=>{\n      localStorage.removeItem(\"TOGGLE_AUTH_TOKEN\")\n      setLogin(false);\n   }\n\n  let value = { loggedin: login, signin, signout }\n  useEffect(()=>{\n    if(response.success){\n      setLogin(true);\n    }\n    if(response.error){\n\t\t\tenqueueSnackbar(response.error.message, {\n\t\t\t\tvariant: \"error\",\n\t\t\t\taction: <CloseButton onClick={()=>closeSnackbar()}>Dismiss</CloseButton>\n\t\t\t})\n    }\n  }, [response])\n  return (\n\t<AuthContext.Provider value={value}>\n\t\t{children}\n\t</AuthContext.Provider>\n  )\n}\n\nconst CloseButton = styled.button`\n\tborder: 1px solid #fff;\n\tborder-radius: 4px;\n\tpadding: 10px 20px;\n\tbackground: transparent;\n\tcolor: #fff;\n\tfont-weight: 500;\n`\n"]},"metadata":{},"sourceType":"module"}