{"ast":null,"code":"var _jsxFileName = \"/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { verifyOTP } from \"../actions/usersAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [login, setLogin] = useState(false);\n  const response = useSelector(state => state.verifyOTP);\n  const dispatch = useDispatch();\n\n  const signin = (params, callback) => {\n    console.log(params);\n    dispatch(verifyOTP(params));\n    callback();\n  };\n\n  const signout = () => {\n    localStorage.removeItem(\"TOGGLE_AUTH_TOKEN\");\n  };\n\n  let loggedin = useMemo(() => {\n    if (localStorage.getItem(\"TOGGLE_AUTH_TOKEN\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }, [login]);\n  let value = {\n    loggedin,\n    signin,\n    signout\n  };\n  useEffect(() => {\n    console.log(response);\n\n    if (response.success) {\n      setLogin(true);\n    }\n  }, [response]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 2\n  }, this);\n};\n\n_s(AuthProvider, \"9Aj9Dy1OKFtNgknP/8tWlR+zIhY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/Context/AuthProvider.tsx"],"names":["useState","useMemo","useEffect","AuthContext","verifyOTP","useSelector","useDispatch","AuthProvider","children","login","setLogin","response","state","dispatch","signin","params","callback","console","log","signout","localStorage","removeItem","loggedin","getItem","value","success"],"mappings":";;;AAAA,SAAoBA,QAApB,EAA8BC,OAA9B,EAAuCC,SAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAAwC,eAAxC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,aAA/D;;AAOA,OAAO,MAAMC,YAAY,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACnD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAU,KAAV,CAAlC;AACA,QAAMW,QAAmB,GAAGN,WAAW,CAAEO,KAAD,IAAqBA,KAAK,CAACR,SAA5B,CAAvC;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;;AACA,QAAMQ,MAAM,GAAG,CAACC,MAAD,EAAqBC,QAArB,KAA+C;AAC5DC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAF,IAAAA,QAAQ,CAAMT,SAAS,CAACW,MAAD,CAAf,CAAR;AACAC,IAAAA,QAAQ;AACR,GAJF;;AAMC,QAAMG,OAAO,GAAG,MAAI;AACjBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,mBAAxB;AACF,GAFD;;AAGA,MAAIC,QAAQ,GAAGrB,OAAO,CAAC,MAAI;AACzB,QAAGmB,YAAY,CAACG,OAAb,CAAqB,mBAArB,CAAH,EAA6C;AAC3C,aAAO,IAAP;AACD,KAFD,MAEK;AACH,aAAO,KAAP;AACD;AACF,GANqB,EAMnB,CAACd,KAAD,CANmB,CAAtB;AAQD,MAAIe,KAAK,GAAG;AAAEF,IAAAA,QAAF;AAAYR,IAAAA,MAAZ;AAAoBK,IAAAA;AAApB,GAAZ;AACAjB,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AACA,QAAGA,QAAQ,CAACc,OAAZ,EAAoB;AAClBf,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACC,QAAD,CALM,CAAT;AAMA,sBACD,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEa,KAA7B;AAAA,cACEhB;AADF;AAAA;AAAA;AAAA;AAAA,UADC;AAKD,CAjCM;;GAAMD,Y;UAEiBF,W,EACXC,W;;;KAHNC,Y","sourcesContent":["import { ReactNode, useState, useMemo, useEffect }from 'react'\nimport { AuthContext, ParamsType } from './AuthContext'\nimport { verifyOTP } from \"../actions/usersAction\"\nimport { TypedUseSelectorHook ,useSelector, useDispatch } from \"react-redux\";\nimport { RootState, AppDispatch } from \"../store\"\nimport { StateType } from \"../interfacesAndTypes/TState\"\ntype Props = {\n\tchildren: ReactNode\n}\n\nexport const AuthProvider = ({ children }: Props) => {\n  const [login, setLogin] = useState<boolean>(false) \n  const response: StateType = useSelector((state: RootState)=> state.verifyOTP);\n  const dispatch = useDispatch<AppDispatch>();\n  const signin = (params: ParamsType, callback: VoidFunction )=>{\n    console.log(params);\n    dispatch<any>(verifyOTP(params))\n    callback()\n   }\n\n   const signout = ()=>{\n      localStorage.removeItem(\"TOGGLE_AUTH_TOKEN\")\n   }\n   let loggedin = useMemo(()=>{\n     if(localStorage.getItem(\"TOGGLE_AUTH_TOKEN\")){\n       return true;\n     }else{\n       return false\n     }\n   }, [login])\n\n  let value = { loggedin, signin, signout }\n  useEffect(()=>{\n    console.log(response)\n    if(response.success){\n      setLogin(true);\n    }\n  }, [response])\n  return (\n\t<AuthContext.Provider value={value}>\n\t\t{children}\n\t</AuthContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}