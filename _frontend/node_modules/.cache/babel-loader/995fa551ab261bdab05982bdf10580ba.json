{"ast":null,"code":"import { getActionsStates } from \"../Utils/storeHelpers\";\nimport { GET_LOGOUT, GET_OTP, VERIFY_OTP } from \"./Types\";\nimport { sendRequest } from \"../services\";\nexport const getOTPLoading = isLoading => {\n  return {\n    type: getActionsStates(GET_OTP).loading,\n    isLoading\n  };\n};\nexport const getOTPSuccess = data => {\n  return {\n    type: getActionsStates(GET_OTP).success,\n    data\n  };\n};\nexport const getOTPError = error => {\n  return {\n    type: getActionsStates(GET_OTP).error,\n    error\n  };\n};\nexport const getOTP = params => {\n  let url = \"/login\";\n  return dispatch => sendRequest.post(dispatch, url, params, getOTPLoading, getOTPSuccess, getOTPError);\n};\nexport const verifyOTPLoading = isLoading => {\n  return {\n    type: getActionsStates(VERIFY_OTP).loading,\n    isLoading\n  };\n};\nexport const verifyOTPSuccess = data => {\n  return {\n    type: getActionsStates(VERIFY_OTP).success,\n    data\n  };\n};\nexport const verifyOTPError = error => {\n  return {\n    type: getActionsStates(VERIFY_OTP).error,\n    error\n  };\n};\nexport const verifyOTP = params => {\n  let url = \"/verify\";\n  return dispatch => sendRequest.post(dispatch, url, params, verifyOTPLoading, verifyOTPSuccess, verifyOTPError);\n};\nexport const logoutLoading = isLoading => {\n  return {\n    type: getActionsStates(GET_LOGOUT).loading,\n    isLoading\n  };\n};\nexport const logoutSuccess = data => {\n  return {\n    type: getActionsStates(GET_LOGOUT).success,\n    data\n  };\n};\nexport const logoutError = error => {\n  return {\n    type: getActionsStates(GET_LOGOUT).error,\n    error\n  };\n};\nexport const getLogout = () => {\n  let url = \"/logout\";\n  return dispatch => sendRequest.post(dispatch, url, params, logoutLoading, logoutSuccess, logoutError);\n};","map":{"version":3,"sources":["/home/rackham/dev/toggle/frontend/src/actions/usersAction.ts"],"names":["getActionsStates","GET_LOGOUT","GET_OTP","VERIFY_OTP","sendRequest","getOTPLoading","isLoading","type","loading","getOTPSuccess","data","success","getOTPError","error","getOTP","params","url","dispatch","post","verifyOTPLoading","verifyOTPSuccess","verifyOTPError","verifyOTP","logoutLoading","logoutSuccess","logoutError","getLogout"],"mappings":"AACA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,UAA9B,QAAgD,SAAhD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAIA,OAAO,MAAMC,aAAa,GAAIC,SAAD,IAAuB;AACnD,SAAO;AACNC,IAAAA,IAAI,EAAEP,gBAAgB,CAACE,OAAD,CAAhB,CAA0BM,OAD1B;AAENF,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMG,aAAa,GAAIC,IAAD,IAAc;AAC1C,SAAO;AACNH,IAAAA,IAAI,EAAEP,gBAAgB,CAACE,OAAD,CAAhB,CAA0BS,OAD1B;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAME,WAAW,GAAIC,KAAD,IAAc;AACxC,SAAO;AACNN,IAAAA,IAAI,EAAEP,gBAAgB,CAACE,OAAD,CAAhB,CAA0BW,KAD1B;AAENA,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAe;AACpC,MAAIC,GAAG,GAAG,QAAV;AACA,SAAQC,QAAD,IAAmBb,WAAW,CAACc,IAAZ,CAAiBD,QAAjB,EAA2BD,GAA3B,EAAgCD,MAAhC,EAAuCV,aAAvC,EAAsDI,aAAtD,EAAqEG,WAArE,CAA1B;AACA,CAHM;AAKP,OAAO,MAAMO,gBAAgB,GAAIb,SAAD,IAAuB;AACtD,SAAO;AACNC,IAAAA,IAAI,EAAEP,gBAAgB,CAACG,UAAD,CAAhB,CAA6BK,OAD7B;AAENF,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMc,gBAAgB,GAAIV,IAAD,IAAc;AAC7C,SAAO;AACNH,IAAAA,IAAI,EAAEP,gBAAgB,CAACG,UAAD,CAAhB,CAA6BQ,OAD7B;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMW,cAAc,GAAIR,KAAD,IAAc;AAC3C,SAAO;AACNN,IAAAA,IAAI,EAAEP,gBAAgB,CAACG,UAAD,CAAhB,CAA6BU,KAD7B;AAENA,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMS,SAAS,GAAIP,MAAD,IAAsB;AAC9C,MAAIC,GAAG,GAAG,SAAV;AACA,SAAQC,QAAD,IAAiCb,WAAW,CAACc,IAAZ,CAAiBD,QAAjB,EAA2BD,GAA3B,EAAgCD,MAAhC,EAAuCI,gBAAvC,EAAyDC,gBAAzD,EAA2EC,cAA3E,CAAxC;AACA,CAHM;AAKP,OAAO,MAAME,aAAa,GAAIjB,SAAD,IAAuB;AACnD,SAAO;AACNC,IAAAA,IAAI,EAAEP,gBAAgB,CAACC,UAAD,CAAhB,CAA6BO,OAD7B;AAENF,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMkB,aAAa,GAAId,IAAD,IAAc;AAC1C,SAAO;AACNH,IAAAA,IAAI,EAAEP,gBAAgB,CAACC,UAAD,CAAhB,CAA6BU,OAD7B;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMe,WAAW,GAAIZ,KAAD,IAAc;AACxC,SAAO;AACNN,IAAAA,IAAI,EAAEP,gBAAgB,CAACC,UAAD,CAAhB,CAA6BY,KAD7B;AAENA,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMa,SAAS,GAAG,MAAI;AAC5B,MAAIV,GAAG,GAAG,SAAV;AACA,SAAQC,QAAD,IAAiCb,WAAW,CAACc,IAAZ,CAAiBD,QAAjB,EAA2BD,GAA3B,EAAgCD,MAAhC,EAAuCQ,aAAvC,EAAsDC,aAAtD,EAAqEC,WAArE,CAAxC;AACA,CAHM","sourcesContent":["\nimport { getActionsStates } from \"../Utils/storeHelpers\";\nimport { GET_LOGOUT, GET_OTP, VERIFY_OTP } from \"./Types\";\nimport { sendRequest } from \"../services\"\nimport { Action, Dispatch } from \"redux\";\nimport { ParamsType } from \"../Context/AuthContext\";\n\nexport const getOTPLoading = (isLoading: boolean) =>{\n\treturn {\n\t\ttype: getActionsStates(GET_OTP).loading,\n\t\tisLoading\n\t}\n}\n\nexport const getOTPSuccess = (data: any) =>{\n\treturn {\n\t\ttype: getActionsStates(GET_OTP).success,\n\t\tdata\n\t}\n}\n\nexport const getOTPError = (error: any)=>{\n\treturn {\n\t\ttype: getActionsStates(GET_OTP).error,\n\t\terror\n\t}\n}\n\nexport const getOTP = (params: any)=>{\n\tlet url = \"/login\"\n\treturn (dispatch: any) => sendRequest.post(dispatch, url, params,getOTPLoading, getOTPSuccess, getOTPError)\n}\n\nexport const verifyOTPLoading = (isLoading: boolean) =>{\n\treturn {\n\t\ttype: getActionsStates(VERIFY_OTP).loading,\n\t\tisLoading\n\t}\n}\n\nexport const verifyOTPSuccess = (data: any) =>{\n\treturn {\n\t\ttype: getActionsStates(VERIFY_OTP).success,\n\t\tdata\n\t}\n}\n\nexport const verifyOTPError = (error: any)=>{\n\treturn {\n\t\ttype: getActionsStates(VERIFY_OTP).error,\n\t\terror\n\t}\n}\n\nexport const verifyOTP = (params: ParamsType)=>{\n\tlet url = \"/verify\"\n\treturn (dispatch: Dispatch<Action> ) => sendRequest.post(dispatch, url, params,verifyOTPLoading, verifyOTPSuccess, verifyOTPError)\n}\n\nexport const logoutLoading = (isLoading: boolean) =>{\n\treturn {\n\t\ttype: getActionsStates(GET_LOGOUT).loading,\n\t\tisLoading\n\t}\n}\n\nexport const logoutSuccess = (data: any) =>{\n\treturn {\n\t\ttype: getActionsStates(GET_LOGOUT).success,\n\t\tdata\n\t}\n}\n\nexport const logoutError = (error: any)=>{\n\treturn {\n\t\ttype: getActionsStates(GET_LOGOUT).error,\n\t\terror\n\t}\n}\n\nexport const getLogout = ()=>{\n\tlet url = \"/logout\"\n\treturn (dispatch: Dispatch<Action> ) => sendRequest.post(dispatch, url, params,logoutLoading, logoutSuccess, logoutError)\n}"]},"metadata":{},"sourceType":"module"}